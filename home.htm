<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />

    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css"
      integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh"
      crossorigin="anonymous"
    />

    <title>Mixer Home</title>

    <style>
      h6 {
        padding-top: 10px;
      }
      #container {
        width: 100%;
        height: 90%;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #1db954;
      }

      h1 {
        text-align: center;
        padding: 0.25em;
        font-family: 'Montserrat', sans-serif;
      }
      .container {
        padding-top: 2em;
      }
      p {
        font-size: 20px;
        text-align: center;
        font-family: 'Montserrat', sans-serif;
      }
    </style>
  </head>

  <body>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <div class="card text-center" style="margin-top:50px">
                    
        <div class="card-body">
          <h1 class="card-title"><a href="http://localhost:3000/">Mixer</a></h1>
          <h5 class="card-text">Select a playlist to convert</h5>
        </div>
        <p id="theUsersName">Signing in...</p>

      </div>

 

    <div class="container">
      <div class="row">
        <div class="col-sm">
          <div class="card" style="width: 20em;">
          <div class="card-header">
                <h3 style="text-align:center">Playlists</h3>
              </div>
                  <div id="playlistItems"  ></div>
              </div>
              <div class="p-2" ><input
                id="submit"
                type="submit"
                class="btn btn-success"
                value="Mixer Playlist"
              />
            
              <input
              id="delete"
              type="submit"

              class="btn btn-danger"
              value="Delete Playlist"
            /></div>
            </div>
            <div class="col-sm">
        
                <div class="card" style="width: 20em; margin-bottom:100px" >
                    <div class="card-header">
                      <h3 style="text-align:center">Before Cleanified <div id="numberOfSongsBeforeCleanified"></div> </h3>
                    </div>
                    <div id="tracksInPlaylist"></div>
                  </div>
                </div>
                  <div class="col-sm">
 
              <div class="card" style="width: 20em;margin-bottom:100px" >
                  <div class="card-header">
                    <h3 style="text-align:center; " >After Cleanified <div id="numberOfSongsAfterCleanified"></div></h3>
                  </div>
                  <div id="tracksInNewPlaylist"></div>
            </div>
          </div>
        </div>
      </div>
      
      </div>
    
           </div>
            </div>
          </div>
        </div>
      </div>

    
      

    </div>
    <script>
      //gets the accessToken from the search bar paramater
      const urlParams = new URLSearchParams(window.location.search);
      const accessToken = urlParams.get('access_token');

      getSpotifyUsername();
      getPlaylists();

      let submit = document.getElementById('submit');
      submit.addEventListener('click', createCleanifiedPlaylist, false);

      let deleted = document.getElementById('delete');
      deleted.addEventListener('click', deletePlaylist, false);

      //Get's spotify username of the person whos account you are logged into
      function getSpotifyUsername() {
        fetch('https://api.spotify.com/v1/me', {
          headers: {
            Authorization: 'Bearer ' + accessToken
          }
        })
          .then(res => res.json())
          .then(
            data =>
              (document.getElementById('theUsersName').innerHTML =
                'Signed in as ' + `<strong>${data.display_name}</strong`)
          );
      }

      //Get's all playlists that the user follows
      function getPlaylists() {
        fetch('https://api.spotify.com/v1/me/playlists', {
          headers: {
            Authorization: 'Bearer ' + accessToken
          }
        })
          .then(res => res.json())
          .then(data => {
            let playlistItems = '';
            let count = 0;
            data.items.forEach(function(names) {
              count++;
              
             
             
              playlistItems += `
             
                  <ul class="list-group list-group-flush">
                    <li class="list-group-item"> <input type = "radio" name="playlistTitles" id="${names.id}" value="${names.name}">  ${names.name}</li>
                  </ul>
           
            `;
            });
            document.getElementById('playlistItems').innerHTML = playlistItems;
          });
      }

      function deletePlaylist() {
        let checkedPlaylistID = getCheckedPlaylistID();
        let checkedPlaylistName = getCheckedPlaylistName();

        fetch(
          `https://api.spotify.com/v1/playlists/${checkedPlaylistID}/followers`,
          {
            method: 'DELETE',
            headers: {
              Authorization: 'Bearer ' + accessToken
            }
          }
        )
          .then(res => res.json())
          .then(data => {
            
          });
          location.reload();
          
        alert(`Deleted playlist named: ${checkedPlaylistName}`);
        
      }

      function getCheckedPlaylistID() {
        let OGPlaylistID;
        let ele = document.getElementsByName('playlistTitles');
        for (i = 0; i < ele.length; i++) {
          if (ele[i].checked) {
            OGPlaylistID = ele[i].id; //get playlistID of checked playlist

            return OGPlaylistID;
          }
        }
      }

      function getCheckedPlaylistName() {
        let oldPlaylistName = '';
        let OGPlaylistID;
        let ele = document.getElementsByName('playlistTitles');
        for (i = 0; i < ele.length; i++) {
          if (ele[i].checked) {
            oldPlaylistName = ele[i].value; //get the name of the checked playlist

            return oldPlaylistName;
          }
        }
      }

      //once the "mixer playlist button" is pressed, this function
      //creates a new playlist based off of the existing playlists name, and
      //it displays the tracks of the original playlist and shows which tracks
      //are explicit

      function createCleanifiedPlaylist() {
        let checkedPlaylistName = getCheckedPlaylistName();
        let checkedPlaylistID = getCheckedPlaylistID();

        let newlyCreatedPlaylistID = '';
        //creates new playlist
        fetch('https://api.spotify.com/v1/me/playlists', {
          method: 'POST',
          body: JSON.stringify({
            name:
              checkedPlaylistName +
              ' (Cleanified)' ,
            public: false
          }),
          headers: {
            Authorization: 'Bearer ' + accessToken,
            'Content-Type': 'application/json'
          }
        })
          .then(res => res.json())
          .then(data => {
            newlyCreatedPlaylistID = data.id;
            getAndDisplayTracks(checkedPlaylistID, newlyCreatedPlaylistID);
          });

      
      };
    

      function getAndDisplayTracks(checkedPlaylistID, newPlaylistID) {
        //Gets the tracks of the OG Playlist
        fetch(
          `https://api.spotify.com/v1/playlists/${checkedPlaylistID}/tracks`,
          {
            headers: {
              Authorization: 'Bearer ' + accessToken,
              'Content-Type': 'application/json'
            }
          }
        )
          .then(res => res.json())
          .then(data => {
            let cleanTracks = [];
            let tracksInPlaylist = ``;
            let totalTracks;
            data.items.forEach(function(names) {
              if (!names.track.explicit) {
                cleanTracks.push('spotify:track:' + names.track.id);
              }
              tracksInPlaylist += `
              <ul class="list-group list-group-flush">
              <li  class="list-group-item" name="trackTitles" trackId="${names.track.id}" explicit="${names.track.explicit}">${names.track.name}</li>
                </ul>

    
                `;
            });

            document.getElementById(
              'tracksInPlaylist'
            ).innerHTML = tracksInPlaylist;
            document.getElementById('numberOfSongsBeforeCleanified').innerHTML =`(${data.total} total)`;

            addTracksIntoCleanfiedPlaylist(newPlaylistID, cleanTracks);
            findCleanVersionOfSongs(checkedPlaylistID, newPlaylistID);
            getAfterCleanified(newPlaylistID);
           
            //display "after cleanified"
            
        

      });
    }

    function getAfterCleanified(newPlaylistID){
      setTimeout(function () {
      fetch(
          `https://api.spotify.com/v1/playlists/${newPlaylistID}/tracks`,
          {
            headers: {
              Authorization: 'Bearer ' + accessToken,
              'Content-Type': 'application/json'
            }
          }
        )
          .then(res => res.json())
          .then(data => {
            let cleanTracks = [];
            let tracksInNewPlaylist = ``;
            data.items.forEach(function(names) {

              tracksInNewPlaylist += `
              <ul class="list-group list-group-flush">
              <li  class="list-group-item" name="trackTitles" trackId="${names.track.id}" explicit="${names.track.explicit}">${names.track.name}</li>
                </ul>

    
                `;
            });

            document.getElementById(
              'tracksInNewPlaylist'
            ).innerHTML = tracksInNewPlaylist;
            document.getElementById('numberOfSongsAfterCleanified').innerHTML =`(${data.total} total)`;

          });
          
        }, 3000);
    }


      function addTracksIntoCleanfiedPlaylist(playlistID, cleanTracks) {
        //  `https://api.spotify.com/v1/playlists/5U74wGWvE7pepqLyYSklT1/tracks`,
        fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`, {
          method: 'POST',
          body: JSON.stringify({
            uris: cleanTracks
          }),
          headers: {
            Authorization: 'Bearer ' + accessToken,
            'Content-Type': 'application/json'
          }
        })
          .then(res => res.json())
          .then(data => {
          });
      }

      function findCleanVersionOfSongs(checkedPlaylistID, newPlaylistID) {
        //add all of the explicit songs you want to look for into an array
        fetch(
          `https://api.spotify.com/v1/playlists/${checkedPlaylistID}/tracks`,
          {
            headers: {
              Authorization: 'Bearer ' + accessToken,
              'Content-Type': 'application/json'
            }
          }
        )
          .then(res => res.json())
          .then(data => {
            let explicitTracks = [];
            let count = 0;
            data.items.forEach(function(names) {
              if (names.track.explicit) {
                count++;
                explicitTracks.push(`${names.track.name} Clean`);
              }
            });
            for (i = 0; i < explicitTracks.length; i++) {
              searchForSong(explicitTracks[i], newPlaylistID);
            }
          });
      }

      function searchForSong(songTitle, newPlaylistID) {
        fetch(
          ` https://api.spotify.com/v1/search?q=${songTitle}&type=playlist`,
          {
            headers: {
              Authorization: 'Bearer ' + accessToken,
              'Content-Type': 'application/json'
            }
          }
        )
          .then(res => res.json())
          .then(data => {
            if (data.playlists.items.length > 0) {
              theRandomPlaylistWithCleanSongID = data.playlists.items[0].id;
             
              getFirstSongInPlaylist(
                theRandomPlaylistWithCleanSongID,
                songTitle,
                newPlaylistID
              );
            }
          });
      }

      function getFirstSongInPlaylist(playlistID, songTitle, newPlaylistID) {
        fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`, {
          headers: {
            Authorization: 'Bearer ' + accessToken,
            'Content-Type': 'application/json'
          }
        })
          .then(res => res.json())
          .then(data => {
            let cleanTracks = [];

            data.items.forEach(function(names) {
              if (
                !names.track.explicit &&
                names.track.name === songTitle.slice(0, -6)
              ) {
                cleanTracks.push('spotify:track:' + names.track.id);
              }
            });
            addTracksIntoCleanfiedPlaylist(newPlaylistID, cleanTracks);
          });
      }

      //method for finding clean playlists:
      //enter name of song + clean
      //go to the top result playlist and add first track in the playlist into the cleanified album
      //check if the name of the song you are added is equal to the song that you were originally looking for

    </script>
  </body>
</html>
